[["index.html", "Creating swimmer plots with ease 1 Introduction to swimmers plots", " Creating swimmer plots with ease Jessica Weiss 1 Introduction to swimmers plots A swimmer plot is a graphical tool used to display individual trajectories over time. A swimmer plot is able to tell a full story using horizontal bars to represent each subject (or study unit), while lines, points, and arrows are utilized to display additional information. The “swimmer” package has a variety of functions which add layers to a swimmer plot by implementing ggplot functions. This vignette goes through examples to create swimmers plots, and demonstrates converting a dataframe to the required format. "],["a-working-example.html", "2 A working example 2.1 The Data and research question 2.2 Basic plot 2.3 Modifying the order and colours of the bars 2.4 Stratification 2.5 Adding points 2.6 Adding lines 2.7 Adding lines and points together 2.8 Adding arrows 2.9 Making the plots more aesthetically pleasing with ggplot manipulations", " 2 A working example 2.1 The Data and research question This is a clinical trial of 36 patients in which patients are randomized to one of two treatment arms, at 5 months patients are intended to switch arms, for each patient the adverse events and response information is recorded. The data is stored in three dataframes, ClinicalTrial.Arm, ClinicalTrial.AE, and ClinicalTrial.Response knitr::kable(head(ClinicalTrial.Arm,10)) id Arm End_trt Continued_treatment Sex Age 1 Arm A 3.26 NA F &gt;=65 2 Arm A 2.00 NA F &lt;65 2 Off Treatment 10.00 NA F &lt;65 2 Arm A 15.45 NA F &lt;65 3 Arm B 5.00 NA F &gt;=65 3 Arm A 14.84 NA F &gt;=65 4 Arm B 3.51 NA F &lt;65 5 Arm B 6.00 NA F &gt;=65 5 Arm A 7.44 NA F &gt;=65 6 Arm B 3.70 NA F &lt;65 knitr::kable(head(ClinicalTrial.AE,10)) id time event Related Sex Age 33 2.20 AE Likely M &gt;=65 14 1.00 SAE Possibly F &lt;65 14 3.67 Death Not Likely F &lt;65 3 14.58 AE Likely F &gt;=65 29 5.44 SAE Possibly M &gt;=65 21 0.50 AE Possibly M &gt;=65 10 5.00 SAE Not Likely F &lt;65 10 6.06 SAE Possibly F &lt;65 2 2.00 SAE Not Likely F &lt;65 3 14.84 Death Likely F &gt;=65 knitr::kable(head(ClinicalTrial.Response,10)) id Response_start Response_end Response Continued_response Sex Age 10 3.74 6.02 CR NA F &lt;65 11 1.48 2.21 PR NA F &gt;=65 12 0.20 0.67 CR NA F &lt;65 13 2.07 2.59 CR NA F &gt;=65 15 0.35 4.05 PR NA M &gt;=65 16 4.49 7.30 CR NA M &lt;65 17 1.09 1.44 PR NA M &gt;=65 18 0.55 1.32 CR NA M &lt;65 19 0.00 0.96 PR 1 M &gt;=65 2 3.36 8.77 PR NA F &lt;65 2.2 Basic plot The swimmer_plot() function creates the base of the swimmer plot The required arguments are a dataframe, an id column name, and the column name of where the bars end You have the option to add the start time for each bar if there are gaps between sections of bars, or if some bars begin prior to time zero By default the bars are in increasing order, but any order can be specified A column name for the fill, transparency and colour (outline of the bars) can also be included Individual bars can change colour/transparency over time Other aesthetics can be manipulated using geom_bar() arguments (eg. fill,width, alpha) swimmer_plot(df=ClinicalTrial.Arm,id=&#39;id&#39;,end=&#39;End_trt&#39;,fill=&#39;lightblue&#39;,width=.85) 2.3 Modifying the order and colours of the bars The swimmer_plot() function includes the option for a bar to change colours. Each section of the bars should be in a different row, where each row includes the time that section ends. By default the bars are plotted in increasing order, a column name can be used in the argument id_order to have the bars sorted first by a column, or string of IDs can be specified to have the bars in a specific order. Here the bars are ordered by the starting treatment, and follow up time. arm_plot &lt;- swimmer_plot(df=ClinicalTrial.Arm,id=&#39;id&#39;,end=&#39;End_trt&#39;,name_fill=&#39;Arm&#39;, id_order=&#39;Arm&#39;,col=&quot;black&quot;,alpha=0.75,width=.8) arm_plot 2.4 Stratification Plots can be stratified by any variables in the dataframe swim_plot_stratify &lt;-swimmer_plot(df=ClinicalTrial.Arm,id=&#39;id&#39;,end=&#39;End_trt&#39;,name_fill=&#39;Arm&#39;, col=&quot;black&quot;,alpha=0.75,width=.8,base_size = 14,stratify= c(&#39;Age&#39;,&#39;Sex&#39;)) swim_plot_stratify 2.5 Adding points Points are added with the swimmer_points() function The required arguments are a dataframe, an id column name, and the column name of the point’s location The shape, size, fill, stroke, and transparency can all be mapped to columns The argument adj.y can be used to adjust the height position of points withing a bar Other aesthetics can be manipulated using geom_point() arguments AE_plot &lt;- arm_plot + swimmer_points(df_points= ClinicalTrial.AE,id=&#39;id&#39;,time=&#39;time&#39;,name_shape = &#39;event&#39;,size=2.5,fill=&#39;white&#39;,col=&#39;black&#39;) AE_plot Multiple aesthetics can be mapped to different columns arm_plot + swimmer_points(df_points= ClinicalTrial.AE,id=&#39;id&#39;,time=&#39;time&#39;,name_shape = &#39;event&#39;,size=2.5,fill=&#39;white&#39;,name_col = &#39;Related&#39;) 2.6 Adding lines Lines are added with the swimmer_lines() function The required arguments are a dataframe, an id column name, and the column names of the line’s start and end locations The linetype, colour, size, and transparency can all be mapped to columns The argument adj.y can be used to adjust the height position of lines withing a bar Other aesthetics can be manipulated using geom_segment() arguments Response_plot &lt;- arm_plot + swimmer_lines(df_lines=ClinicalTrial.Response,id=&#39;id&#39;,start = &#39;Response_start&#39;,end=&#39;Response_end&#39;,name_col=&#39;Response&#39;,size=1) Response_plot 2.7 Adding lines and points together The function swimmer_points_from_lines() adds points to a plot at the start and end of each line The required arguments are the same as swimmer_lines() An additional argument “cont” can be used to specify lines which do not end Other aesthetics can be manipulated using geom_point() arguments Response_plot_with_points &lt;- Response_plot+ swimmer_points_from_lines(df_lines=ClinicalTrial.Response,id=&#39;id&#39;,start = &#39;Response_start&#39;,end = &#39;Response_end&#39;, cont = &#39;Continued_response&#39;,name_col=&#39;Response&#39;,size=2) #&gt; Warning: `gather_()` was deprecated in #&gt; tidyr 1.2.0. #&gt; ℹ Please use `gather()` instead. #&gt; ℹ The deprecated feature was #&gt; likely used in the swimplot #&gt; package. #&gt; Please report the issue to the #&gt; authors. #&gt; This warning is displayed once #&gt; every 8 hours. #&gt; Call #&gt; `lifecycle::last_lifecycle_warnings()` #&gt; to see where this warning was #&gt; generated. Response_plot_with_points 2.8 Adding arrows Arrows are added at the end of bars with the swimmer_arrows() function The required arguments are a dataframe, an id column name, and the column names of the location the arrows begin An additional argument “cont” can be used if only some bars will have an arrow The colour can be mapped to a column Features of the arrows which can be modified include the size, length and type of arrow Other aesthetics can be manipulated using geom_segment() arguments The example below uses arrows to demonstrate patients remaining on treatment after the end of follow up AE_plot+ swimmer_arrows(df_arrows=ClinicalTrial.Arm,id=&#39;id&#39;,arrow_start=&#39;End_trt&#39;, cont = &#39;Continued_treatment&#39;,name_col=&#39;Arm&#39;,type = &quot;open&quot;,cex=1) Since none of the patients continue on “Off treatment” the arrow colours do not match the bars, this can be fixed by adding the layer scale_color_discrete(drop=FALSE), the option show.legend = FALSE can also be employed as the arrow legend is not necessary AE_plot &lt;- AE_plot+ swimmer_arrows(df_arrows=ClinicalTrial.Arm,id=&#39;id&#39;,arrow_start=&#39;End_trt&#39;, cont = &#39;Continued_treatment&#39;,name_col=&#39;Arm&#39;,show.legend = FALSE,type = &quot;open&quot;,cex=1) + scale_color_discrete(drop=FALSE) AE_plot Another arrow example, here the arrows are also used to demonstrate a continued treatment Response_plot_with_points &lt;- Response_plot_with_points+ swimmer_arrows(df_arrows=ClinicalTrial.Response,id=&#39;id&#39;,arrow_start=&#39;Response_end&#39;, cont = &#39;Continued_response&#39;,name_col=&#39;Response&#39;,show.legend = FALSE,type = &quot;open&quot;,cex=1) Response_plot_with_points 2.9 Making the plots more aesthetically pleasing with ggplot manipulations 2.9.1 Modifying Colours and shapes AE_plot &lt;- AE_plot + scale_fill_manual(name=&quot;Treatment&quot;,values=c(&quot;Arm A&quot; = &quot;#e41a1c&quot;, &quot;Arm B&quot;=&quot;#377eb8&quot;,&quot;Off Treatment&quot;=&#39;#4daf4a&#39;))+ scale_color_manual(name=&quot;Treatment&quot;,values=c(&quot;Arm A&quot;=&quot;#e41a1c&quot;, &quot;Arm B&quot; =&quot;#377eb8&quot;,&quot;Off Treatment&quot;=&#39;#4daf4a&#39;)) + scale_shape_manual(name=&quot;Adverse event&quot;,values=c(AE=21,SAE=24,Death=17),breaks=c(&#39;AE&#39;,&#39;SAE&#39;,&#39;Death&#39;)) AE_plot Response_plot_with_points &lt;- Response_plot_with_points + scale_fill_manual(name=&quot;Treatment&quot;,values=c(&quot;Arm A&quot; =&quot;#e41a1c&quot;, &quot;Arm B&quot;=&quot;#377eb8&quot;,&quot;Off Treatment&quot;=&#39;#4daf4a&#39;))+ scale_color_manual(name=&quot;Response&quot;,values=c(&quot;grey20&quot;,&quot;grey80&quot;))+ scale_shape_manual(name=&#39;&#39;,values=c(17,15),breaks=c(&#39;Response_start&#39;,&#39;Response_end&#39;), labels=c(&#39;Response start&#39;,&#39;Response end&#39;)) Response_plot_with_points 2.9.2 Legends Sometimes there will be points within the fill of the legend, this can be turned off with the layer guides() Response_plot_with_points &lt;- Response_plot_with_points+guides(fill = guide_legend(override.aes = list(shape = NA))) Response_plot_with_points 2.9.3 Add arrows to the legend A work around to add arrows to the legend is using the symbol for an arrow within annotate() Response_plot_with_points &lt;- Response_plot_with_points+ annotate(&quot;text&quot;, x=3.5, y=20.45, label=&quot;Continued response&quot;,size=3.25)+ annotate(&quot;text&quot;,x=2.5, y=20.25, label=sprintf(&#39;\\u2192&#39;),size=8.25)+ coord_flip(clip = &#39;off&#39;, ylim = c(0, 17)) Response_plot_with_points 2.9.4 axis The swimmer plot is a bar plot that has been turned on its side, so to modify the x axis it is actually required to change the y axis. This is also the case for adding axis labels Response_plot_with_points + scale_y_continuous(name = &quot;Time since enrollment (months)&quot;,breaks = seq(0,18,by=3)) 2.9.5 Formatting the legend when an aesthetic is mapped in multiple layers Sometimes multiple layers of the swimmers plot will include the same aesthetic the plot below uses “fill” with both the points and with the bars. Using guides, and override.aes the legends can be manipulated to divide the layers in the legend #Overriding legends to have colours for the events and no points in the lines p1 &lt;- arm_plot + swimmer_points(df_points=ClinicalTrial.AE,id=&#39;id&#39;,time=&#39;time&#39;,name_shape = &#39;event&#39;,size=2.5,col=&#39;black&#39;,name_fill = &#39;event&#39;) + scale_shape_manual(values=c(21,22,23),breaks=c(&#39;AE&#39;,&#39;SAE&#39;,&#39;Death&#39;)) p1 +scale_fill_manual(name=&quot;Treatment&quot;,values=c(&quot;AE&quot;=&#39;grey90&#39;,&quot;SAE&quot; =&quot;grey40&quot;,&quot;Death&quot; =1,&quot;Arm A&quot;=&quot;#e41a1c&quot;, &quot;Arm B&quot; =&quot;#377eb8&quot;,&quot;Off Treatment&quot;=&quot;#4daf4a&quot;)) This plot legend is difficult to follow However, by removing the AE fills from the legend, and adding them to the points it is much easier to follow the plot #First step is to correct the fill legend p2 &lt;- p1 + scale_fill_manual(name=&quot;Treatment&quot;,values=c(&quot;AE&quot;=&#39;grey90&#39;,&quot;SAE&quot; =&quot;grey40&quot;,&quot;Death&quot; =1,&quot;Arm A&quot;=&quot;#e41a1c&quot;, &quot;Arm B&quot; =&quot;#377eb8&quot;,&quot;Off Treatment&quot;=&quot;#4daf4a&quot;),breaks = c(&quot;Arm A&quot;,&quot;Arm B&quot;,&quot;Off Treatment&quot;)) p2 ##Then use guides to add the colours to the #Setting the colours of the filled points to match the AE type p2 + guides(shape = guide_legend(override.aes = list(fill=c(&#39;grey90&#39;,&#39;grey40&#39;,1))),fill = guide_legend(override.aes = list(shape = NA))) "],["more-complex-data-structures.html", "3 More complex data structures 3.1 Gaps between sections in a single bar", " 3 More complex data structures 3.1 Gaps between sections in a single bar There may be situations where you want to include gaps between sections of colours in a single bar, or have bars that do not start at time zero. Gap_data &lt;- data.frame(patient_ID=c(&#39;ID:3&#39;,&#39;ID:1&#39;,&#39;ID:1&#39;,&#39;ID:1&#39;,&#39;ID:2&#39;, &#39;ID:2&#39;,&#39;ID:2&#39;,&#39;ID:3&#39;,&#39;ID:3&#39;), start=c(10,1,2,7,2,10,14,5,0), end=c(20,2,4,10,7,14,22,7,3), treatment=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;A&quot;,&quot;A&quot;,&quot;C&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;)) knitr::kable(Gap_data) patient_ID start end treatment ID:3 10 20 A ID:1 1 2 B ID:1 2 4 C ID:1 7 10 A ID:2 2 7 A ID:2 10 14 C ID:2 14 22 A ID:3 5 7 B ID:3 0 3 C When a start and end are specified any spaces in between are filled in with a section of “NA” swimmer_plot(df=Gap_data,id=&#39;patient_ID&#39;,name_fill=&quot;treatment&quot;,col=1, id_order = c(&#39;ID:1&#39;,&#39;ID:2&#39;,&#39;ID:3&#39;)) +theme_bw() Additional “NA” information can be added to the end of a bar when the colour variables is NA Gap_data &lt;- rbind(Gap_data,data.frame(patient_ID=&#39;ID:2&#39;,start=22,end=26,treatment=NA)) knitr::kable(Gap_data) patient_ID start end treatment ID:3 10 20 A ID:1 1 2 B ID:1 2 4 C ID:1 7 10 A ID:2 2 7 A ID:2 10 14 C ID:2 14 22 A ID:3 5 7 B ID:3 0 3 C ID:2 22 26 NA scale_fill_manual can be used to have the NA sections filled in transparently with the argument na.value=NA swimmer_plot(df=Gap_data,id=&#39;patient_ID&#39;,name_fill=&quot;treatment&quot;,col=1, id_order = c(&#39;ID:1&#39;,&#39;ID:2&#39;,&#39;ID:3&#39;)) + ggplot2::theme_bw()+ggplot2::scale_fill_manual(name=&quot;Treatment&quot;, values=c(&quot;A&quot;=&quot;#e41a1c&quot;, &quot;B&quot;=&quot;#377eb8&quot;,&quot;C&quot;=&quot;#4daf4a&quot;,na.value=NA),breaks=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;))+ ggplot2::scale_y_continuous(breaks=c(0:26)) "],["formatting-data.html", "4 Formatting data 4.1 Long data", " 4 Formatting data For all of the function to run, the data must be in the long format. This means that each event must be on a new row. An event would be a single point, a line segment, or an arrow. If a study unit has multiple events occur they must be recorded over multiple rows. Often times data is given in the long format (eg. One row per patient). 4.1 Long data Here is an example data.frame in the long format. wide_example &lt;- structure(list(ID = c(&quot;ID:001&quot;, &quot;ID:002&quot;, &quot;ID:003&quot;), Date.begin.Treatment = structure(c(14307, 14126, 15312), class = &quot;Date&quot;), AE = structure(c(16133, 14491, NA), class = &quot;Date&quot;), SAE = structure(c(16316, NA, 16042), class = &quot;Date&quot;), Death.date = structure(c(16499, NA, 17869), class = &quot;Date&quot;), Response1 = c(&quot;SD&quot;, &quot;SD&quot;, NA), Response1.Start = structure(c(14745, 14345, NA), class = &quot;Date&quot;), Response1.End = structure(c(15111, 14418, NA), class = &quot;Date&quot;), Response2 = c(&quot;CR&quot;, &quot;PR&quot;, NA ), Response2.Start = structure(c(15768, 14674, NA), class = &quot;Date&quot;), Response2.End = structure(c(16133, 14856, NA), class = &quot;Date&quot;), Response3 = c(NA, &quot;CR&quot;, NA), Response3.Start = structure(c(NA, 14856, NA), class = &quot;Date&quot;), Response3.End = structure(c(NA, 15587, NA), class = &quot;Date&quot;), Last.follow.up = structure(c(16499, 17048, 17869), class = &quot;Date&quot;)), class = &quot;data.frame&quot;, row.names = c(NA, -3L)) ID Date.begin.Treatment AE SAE Death.date Response1 Response1.Start Response1.End Response2 Response2.Start Response2.End Response3 Response3.Start Response3.End Last.follow.up ID:001 2009-03-04 2014-03-04 2014-09-03 2015-03-05 SD 2010-05-16 2011-05-17 CR 2013-03-04 2014-03-04 NA NA NA 2015-03-05 ID:002 2008-09-04 2009-09-04 NA NA SD 2009-04-11 2009-06-23 PR 2010-03-06 2010-09-04 CR 2010-09-04 2012-09-04 2016-09-04 ID:003 2011-12-04 NA 2013-12-03 2018-12-04 NA NA NA NA NA NA NA NA NA 2018-12-04 All of the dates need to be converted to time. For each patient the Date.begin.Treatment is the starting point (Time 0) date_cols &lt;- c(&quot;Date.begin.Treatment&quot;,&quot;AE&quot;,&quot;SAE&quot;,&#39;Death.date&#39;,&#39;Response1.Start&#39;, &#39;Response1.End&#39;,&#39;Response2.Start&#39;, &#39;Response2.End&#39;, &#39;Response3.Start&#39; ,&#39;Response3.End&#39; ,&#39;Last.follow.up&#39;) # Getting the columns with dates wide_example[date_cols] &lt;- lapply(wide_example[date_cols], as.numeric) # Converting to numbers wide_example[date_cols] &lt;- round((wide_example[date_cols]-wide_example$Date.begin.Treatment)/365.25,1) #Calcuating the time in years since the start of treatment knitr::kable(wide_example) ID Date.begin.Treatment AE SAE Death.date Response1 Response1.Start Response1.End Response2 Response2.Start Response2.End Response3 Response3.Start Response3.End Last.follow.up ID:001 0 5 5.5 6 SD 1.2 2.2 CR 4.0 5 NA NA NA 6 ID:002 0 1 NA NA SD 0.6 0.8 PR 1.5 2 CR 2 4 8 ID:003 0 NA 2.0 7 NA NA NA NA NA NA NA NA NA 7 The wide data can be used to create the bars of the swimmer plot plot &lt;- swimmer_plot(df=wide_example,id=&#39;ID&#39;,end=&#39;Last.follow.up&#39;,col=&#39;black&#39;,fill=&#39;grey&#39;) plot "],["when-there-is-one-column-per-event-type.html", "5 When there is one column per event type", " 5 When there is one column per event type The gather_() function from the tidyr package can be used to change data from the wide to long format. When each event type has its only column with the exact time, the function only needs to be run once library(tidyr) data_time_points &lt;- wide_example[,c(&#39;ID&#39;,&#39;AE&#39;,&#39;SAE&#39;,&#39;Death.date&#39;)] points_long &lt;- gather_(data=data_time_points,&quot;point&quot;, &quot;time&quot;, gather_cols=c(&#39;AE&#39;,&#39;SAE&#39;,&#39;Death.date&#39;),na.rm=T) knitr::kable(points_long,align=&#39;c&#39;,row.names = F) ID point time ID:001 AE 5.0 ID:002 AE 1.0 ID:001 SAE 5.5 ID:003 SAE 2.0 ID:001 Death.date 6.0 ID:003 Death.date 7.0 The points can now be added to the plot plot+ swimmer_points(df=points_long,id=&#39;ID&#39;,name_shape = &#39;point&#39;,size=8) "],["when-there-are-multiple-column-per-event-type.html", "6 When there are multiple column per event type", " 6 When there are multiple column per event type When there are separate columns for the data, and event type it is more complex. In this data the response start, end, and response types are all stored in different columns, but must be kept together per patient and event. long_start &lt;- gather_(data=wide_example[,c(&#39;ID&#39;,&#39;Response1.Start&#39;,&#39;Response2.Start&#39;,&#39;Response3.Start&#39;)], &quot;response_number&quot;, &quot;start_time&quot;, gather_cols=c(&#39;Response1.Start&#39;,&#39;Response2.Start&#39;, &#39;Response3.Start&#39;),na.rm=T) long_start$response_number &lt;- substring(long_start$response_number,1,9) # Will be used to match to the end and types ID response_number start_time ID:001 Response1 1.2 ID:002 Response1 0.6 ID:001 Response2 4.0 ID:002 Response2 1.5 ID:002 Response3 2.0 Separate dataframes are created for the end time, and response, then they are all merged together by the id, and response_number long_end &lt;- gather_(data=wide_example[,c(&#39;ID&#39;,&#39;Response1.End&#39;,&#39;Response2.End&#39;,&#39;Response3.End&#39;)], &quot;response_number&quot;, &quot;end_time&quot;, gather_cols=c(&#39;Response1.End&#39;,&#39;Response2.End&#39;, &#39;Response3.End&#39;),na.rm=T) long_end$response_number &lt;- substring(long_end$response_number,1,9) long_response &lt;- gather_(data=wide_example[,c(&#39;ID&#39;,&#39;Response1&#39;,&#39;Response2&#39;,&#39;Response3&#39;)], &quot;response_number&quot;, &quot;Response&quot;, gather_cols=c(&#39;Response1&#39;,&#39;Response2&#39;,&#39;Response3&#39;), na.rm=T) long_response_full &lt;- Reduce(function(...) merge(..., all=TRUE,by=c(&#39;ID&#39;,&#39;response_number&#39;)), list(long_start, long_end, long_response)) ID response_number start_time end_time Response ID:001 Response1 1.2 2.2 SD ID:001 Response2 4.0 5.0 CR ID:002 Response1 0.6 0.8 SD ID:002 Response2 1.5 2.0 PR ID:002 Response3 2.0 4.0 CR The lines can then be added to the plot plot+ swimmer_points(df=points_long,id=&#39;ID&#39;,name_shape = &#39;point&#39;,size=8)+ swimmer_lines(df_lines = long_response_full,id=&#39;ID&#39;,start = &#39;start_time&#39;,end=&#39;end_time&#39;, name_col=&#39;Response&#39;,size=25) "],["swimplot.html", "7 swimplot 7.1 Installation 7.2 Documentation 7.3 Examples", " 7 swimplot Swimmer plots are used to show a patient’s response over time (i.e. days), or by treatment course cycle. 7.1 Installation You can install the main version of swimplot from GitHub with: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;biostatsPMH/swimplot&quot;, ref=&quot;main&quot;) An alternative version of swimplot which allows for patterns in the bars (eg. stripes) can be installed from GitHub with: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;biostatsPMH/swimplot&quot;, ref=&quot;pattern&quot;) 7.2 Documentation Online Documentation 7.3 Examples 7.3.1 Swimmer plot that includes AE event status by course cycle Uses addendum fake study data. The below swimmer plot stratifies by sex, but all participants are female. The width, height and scale parameters in ggsave() can be modified to fit a large plot. library(ggplot2); library(swimplot); data(&quot;arm&quot;, &quot;res&quot;, &quot;ae&quot;); res$RESPONSE &lt;- as.factor(res$RESPONSE); levels(res$RESPONSE) &lt;- c(&quot;PD&quot;, &quot;SD&quot;, &quot;NE&quot;, &quot;PR&quot;, &quot;CR&quot;); p &lt;- swimmer_plot(df=arm,id=&#39;SUBJECT&#39;,end=&#39;END_TRT&#39;,name_fill=&#39;ARM&#39;,id_order =&#39;increasing&#39;,col=&quot;black&quot;,alpha=0.75,width=.8,base_size=14,stratify= c(&#39;SEX&#39;)) + swimmer_lines(df_lines=res,id=&#39;SUBJECT&#39;,start=&#39;RESPONSE_START&#39;,end=&#39;RESPONSE_END&#39;,name_col=&#39;RESPONSE&#39;,size=1)+ swimmer_points(df_points=ae,id=&#39;SUBJECT&#39;,time=&#39;COURSE_NUM&#39;,name_shape=&#39;EVENT&#39;,name_col=&#39;EVENT&#39;,fill=&#39;white&#39;,size=c(1.25, 3)[as.factor(ae$EVENT)])+ swimmer_arrows(df_arrows=res,id=&#39;SUBJECT&#39;,arrow_start=&#39;RESPONSE_END&#39;,cont=&#39;CONTINUED_RESPONSE&#39;,name_col=&#39;RESPONSE&#39;,show.legend=FALSE,type=&quot;open&quot;,cex=1) + scale_fill_manual(values=c(&#39;grey60&#39;, &#39;grey90&#39;))+ scale_colour_manual(name=&#39;RESPONSE&#39;,values=c(&#39;PD&#39;=&#39;red&#39;, &#39;SD&#39;=&#39;magenta1&#39;, &#39;NE&#39;=&#39;gold&#39;, &#39;PR&#39;=&#39;chartreuse2&#39;, &#39;CR&#39;=&#39;turquoise2&#39;, &#39;AE&#39;=&#39;red&#39;, &#39;SAE&#39;=&#39;black&#39;), breaks = c(&#39;PD&#39;, &#39;SD&#39;, &#39;NE&#39;, &#39;PR&#39;, &#39;CR&#39;)) + scale_shape_manual(values=c(21, 8))+ ylab(&quot;COURSE CYCLE&quot;) + xlab(&quot;SUBJECT&quot;)+ scale_y_continuous(minor_breaks = seq(0, max(arm$END_TRT), by=2), breaks = seq(0, max(arm$END_TRT), by=4))+ theme(panel.grid.minor = element_line(colour=&quot;grey95&quot;, size=0.5))+ guides(shape = guide_legend(override.aes = list(col=c(2,1))),color=guide_legend(override.aes = list(shape=NA))); ggsave(paste(&quot;man/figures/clin_trial_SEX&quot;, &quot;.png&quot;, sep=&quot;&quot;), p, width=6.4, height=6.4, device=&quot;png&quot;, scale=1); The next swimmer plot stratifies by sex and age category. library(ggplot2); library(swimplot); data(&quot;arm&quot;, &quot;res&quot;, &quot;ae&quot;); res$RESPONSE &lt;- as.factor(res$RESPONSE); levels(res$RESPONSE) &lt;- c(&quot;PD&quot;, &quot;SD&quot;, &quot;NE&quot;, &quot;PR&quot;, &quot;CR&quot;); p &lt;- swimmer_plot(df=arm,id=&#39;SUBJECT&#39;,end=&#39;END_TRT&#39;,name_fill=&#39;ARM&#39;,id_order =&#39;increasing&#39;,col=&quot;black&quot;,alpha=0.75,width=.8,base_size=14,stratify= c(&#39;SEX&#39;,&#39;AGE&#39;)) + swimmer_lines(df_lines=res,id=&#39;SUBJECT&#39;,start=&#39;RESPONSE_START&#39;,end=&#39;RESPONSE_END&#39;,name_col=&#39;RESPONSE&#39;,size=1)+ swimmer_points(df_points=ae,id=&#39;SUBJECT&#39;,time=&#39;COURSE_NUM&#39;,name_shape=&#39;EVENT&#39;,name_col=&#39;EVENT&#39;,fill=&#39;white&#39;,size=c(1.25, 3)[as.factor(ae$EVENT)])+ swimmer_arrows(df_arrows=res,id=&#39;SUBJECT&#39;,arrow_start=&#39;RESPONSE_END&#39;,cont=&#39;CONTINUED_RESPONSE&#39;,name_col=&#39;RESPONSE&#39;,show.legend=FALSE,type=&quot;open&quot;,cex=1) + scale_fill_manual(values=c(&#39;grey60&#39;, &#39;grey90&#39;))+ scale_colour_manual(name=&#39;RESPONSE&#39;,values=c(&#39;PD&#39;=&#39;red&#39;, &#39;SD&#39;=&#39;magenta1&#39;, &#39;NE&#39;=&#39;gold&#39;, &#39;PR&#39;=&#39;chartreuse2&#39;, &#39;CR&#39;=&#39;turquoise2&#39;, &#39;AE&#39;=&#39;red&#39;, &#39;SAE&#39;=&#39;black&#39;), breaks = c(&#39;PD&#39;, &#39;SD&#39;, &#39;NE&#39;, &#39;PR&#39;, &#39;CR&#39;)) + scale_shape_manual(values=c(21, 8))+ ylab(&quot;COURSE CYCLE&quot;) + xlab(&quot;SUBJECT&quot;)+ scale_y_continuous(minor_breaks = seq(0, max(arm$END_TRT), by=2), breaks = seq(0, max(arm$END_TRT), by=4))+ theme(panel.grid.minor = element_line(colour=&quot;grey95&quot;, size=0.5))+ guides(shape = guide_legend(override.aes = list(col=c(2,1))),color=guide_legend(override.aes = list(shape=NA))); ggsave(paste(&quot;man/figures/clin_trial_SEX_AGE&quot;, &quot;.png&quot;, sep=&quot;&quot;), p, width=6.4, height=6.4, device=&quot;png&quot;, scale=1); "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
